{
  "name": "SharePoint Embedded",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "beta -metadata",
      "filename": "beta -metadata.bru",
      "seq": 2,
      "request": {
        "url": "https://graph.microsoft.com/beta/$metadata",
        "method": "GET",
        "headers": [
          {
            "name": "Accept",
            "value": "application/json;odata.metadata=full",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "v1-0 -metadata",
      "filename": "v1-0 -metadata.bru",
      "seq": 1,
      "request": {
        "url": "https://graph.microsoft.com/v1.0/$metadata",
        "method": "GET",
        "headers": [
          {
            "name": "Accept",
            "value": "application/json;odata.metadata=full",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "folder",
      "name": "Application",
      "filename": "Application",
      "root": {
        "request": {
          "script": {
            "req": "const axios = require('axios');\nconst uuid = require('uuid');\nconst { URLSearchParams } = require('url');\n\nconst SCOPES = {\n  'AppOnlyCertGraphToken': 'https://graph.microsoft.com/.default',\n  'AppOnlyCertSPOToken': bru.getEnvVar(\"RootSiteUrl\") + \"/.default\",\n};\n\nasync function ensureAccessToken(tokenName = 'AppOnlyCertGraphToken') {\n    console.log('Ensuring access token', tokenName);\n    let validToken = false;\n    const token = bru.getEnvVar(tokenName);\n\n    if (token) {\n        console.log('checking stored token');\n        try {\n            var tokenObj = KJUR.jws.JWS.parse(token);\n            var nbf = tokenObj.payloadObj.nbf;\n            var exp = tokenObj.payloadObj.exp;\n            var now = getTimeInSec();\n            if (nbf <= now && now < exp) {\n                validToken = true;\n            } else {\n                console.log(\"Stored access token is expired\");\n            }\n        } catch (e) {\n            console.log(\"Unable to parse stored access token\");\n        }\n\n    } else {\n        console.log(\"No access token found\");\n    }\n    if (!validToken) {\n        await acquireAccessToken(tokenName);\n    }\n}\n\nasync function acquireAccessToken(tokenName = 'AppOnlyCertGraphToken') {\n    console.log(\"Acquiring a new access token\", tokenName);\n    const jwt = getRequestJwt();\n\n    const tid = bru.getEnvVar('ConsumingTenantId');\n\n    const body = {\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      client_assertion: jwt,\n      client_id: bru.getEnvVar('ClientID'),\n      scope: SCOPES[tokenName] || 'https://graph.microsoft.com/.default',\n      grant_type: 'client_credentials',\n    };\n    const config = {\n            header: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n    const tokenUrl = `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`;\n    \n    const params = new URLSearchParams(body);\n  \n    const response = await axios.post(tokenUrl, params, config);\n\n    var responseJson = response.data;\n    var token = responseJson.access_token;\n    bru.setEnvVar(tokenName, token);\n}\n\nfunction getRequestJwt() {\n    const header = {\n        'alg': 'RS256',\n        'typ': 'JWT',\n        'x5t': safeBase64EncodedThumbprint(bru.getEnvVar('CertThumbprint'))\n    };\n\n    const now = getTimeInSec();\n    const tid = bru.getEnvVar('ConsumingTenantId');\n    const payload = {\n        'aud': `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,\n        'exp': now + 60 * 60,\n        'iss': bru.getEnvVar('ClientID'),\n        'jti': uuid.v4(),\n        'nbf': now,\n        'sub': bru.getEnvVar('ClientID'),\n        'iat': now\n    };\n\n    const encryptedPk = bru.getEnvVar('CertPrivateKey');\n    let decryptedPk = encryptedPk;\n    if (bru.getEnvVar('CertPassword')) {\n        decryptedPk = KEYUTIL.getKey(encryptedPk, bru.getEnvVar('CertPassword'));\n    }\n    const sHeader = JSON.stringify(header);\n    const sPayload = JSON.stringify(payload);\n\n    return KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, decryptedPk);\n}\n\nfunction getTimeInSec() {\n    return Math.floor(Date.now() / 1000);\n}\n\nfunction safeBase64EncodedThumbprint(thumbprint) {\n    const numCharIn128BitHexString = 128 / 8 * 2;\n    const numCharIn160BitHexString = 160 / 8 * 2;\n    const thumbprintSizes = {};\n    thumbprintSizes[numCharIn128BitHexString] = true;\n    thumbprintSizes[numCharIn160BitHexString] = true;\n    const thumbprintRegExp = /^[a-f\\d]*$/;\n\n    const hexString = thumbprint.toLowerCase().replace(/:/g, '').replace(/ /g, '');\n\n    if (!thumbprintSizes[hexString.length] || !thumbprintRegExp.test(hexString)) {\n        throw 'The thumbprint does not match a known format';\n    }\n\n    const base64 = (Buffer.from(hexString, 'hex')).toString('base64');\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nglobalThis.navigator = {};\nglobalThis.window = {};\n\nif (bru.getEnvVar('jsrsasign-js')) {\n    // eval actually parses the library \n    let jsRsa = decodeURI(bru.getEnvVar('jsrsasign-js'))\n    eval(jsRsa);\n    await ensureAccessToken();\n} else {\n  console.log('downloading RSA library');\n  const axios = require('axios');\n  const response = await axios.get(\n    'https://kjur.github.io/jsrsasign/jsrsasign-all-min.js',\n  );\n  ///console.log(response.data);\n  console.log('Downloaded RSA library');\n  // Why encode and decode the RSA library?\n  // 1. Environments can't be loaded if they have new lines.\n  // 2. Bruno doesn't detect changes made to env vars through a script.\n  // 3. Therefore, changes made to env vars through a script are not saved.\n  // 4. The RSA library has new lines\n  // 5. if for some reason a user makes changes to the environment\n  //    then all current environment vars are saved, including the RSA libray,\n  //    which makes the environment file \"not loadable\"\n  // 6. Encoding converts the data into a single (very large) line\n  // 7. Problem solved  \n  let encodedJsRsa = encodeURI(response.data);\n  bru.setEnvVar('jsrsasign-js', encodedJsRsa);\n}\n"
          }
        },
        "meta": {
          "name": "Application"
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "Files",
          "filename": "Files",
          "items": [
            {
              "type": "http",
              "name": "Create edit share link",
              "filename": "Create edit share link.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"type\": \"edit\",\r\n    \"scope\": \"organization\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Folder",
              "filename": "Create Folder.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/children",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"name\": \"New Folder\",\n  \"folder\": {}\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create view share link",
              "filename": "Create view share link.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get container SharePointIds",
              "filename": "Get container SharePointIds.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}?$select=SharePointIds",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$select",
                    "value": "SharePointIds",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Drive",
              "filename": "Get Drive.bru",
              "seq": 1,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get DriveItems",
              "filename": "Get DriveItems.bru",
              "seq": 2,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/root/children",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get file thumbnails",
              "filename": "Get file thumbnails.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/thumbnails",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get file versions",
              "filename": "Get file versions.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/versions",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get File",
              "filename": "Get File.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Files in Folder",
              "filename": "Get Files in Folder.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{ItemId}}/children",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Recent Files",
              "filename": "Get Recent Files.bru",
              "seq": 14,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/me/drive/recent",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Rename a file",
              "filename": "Rename a file.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"name\": \"Northwind Proposal Updated.docx\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"FileId\", json.id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search DriveItems in Drive",
              "filename": "Search DriveItems in Drive.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/search(q='{contoso}')",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Upload a File",
              "filename": "Upload a File.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root:/Ad Slogans.docx:/content",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"FileId\", json.id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "folder",
              "name": "Additive Permissions",
              "filename": "Additive Permissions",
              "items": [
                {
                  "type": "http",
                  "name": "Delete sharing permission",
                  "filename": "Delete sharing permission.bru",
                  "seq": 3,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {
                      "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                    },
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "bearer",
                      "bearer": {
                        "token": "{{AppOnlyCertGraphToken}}"
                      }
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get sharing permission",
                  "filename": "Get sharing permission.bru",
                  "seq": 2,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {
                      "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                    },
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "bearer",
                      "bearer": {
                        "token": "{{AppOnlyCertGraphToken}}"
                      }
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "List sharing permissions",
                  "filename": "List sharing permissions.bru",
                  "seq": 1,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {
                      "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                    },
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "bearer",
                      "bearer": {
                        "token": "{{AppOnlyCertGraphToken}}"
                      }
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "Containers",
          "filename": "Containers",
          "items": [
            {
              "type": "http",
              "name": "Activate Container",
              "filename": "Activate Container.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/activate",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Container",
              "filename": "Create Container.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"displayName\": \"Container Created with App-Only Auth\",\r\n    \"description\": \"Great description\",\r\n    \"containerTypeId\": \"{{ContainerTypeId}}\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "\nif (res.code === 201) {\n    var json = pm.response.json();\n    bru.setEnvVar(\"ContainerId\", res.data.id);\n}\n",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Group Permissions",
              "filename": "Create Group Permissions.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{GroupAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 201) {\r\n//     var json = pm.response.json();\r\n//     postman.setEnvironmentVariable(\"PermissionId\", json.id);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create User Permission",
              "filename": "Create User Permission.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{UserAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "\nif (res.code === 201) {\n    bru.setEnvVar(\"PermissionId\", response.data.id);\n}\n",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Container Custom Properties",
              "filename": "Get Container Custom Properties.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Container",
              "filename": "Get Container.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Permissions",
              "filename": "Get Permissions.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Hard Delete Container by ID",
              "filename": "Hard Delete Container by ID.bru",
              "seq": 15,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{SoftDeletedContainerId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 204) {\r\n//     pm.environment.unset(\"SoftDeletedContainerId\");\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "List Containers",
              "filename": "List Containers.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {{ContainerTypeId}}",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "containerTypeId eq {{ContainerTypeId}}",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "List Soft Deleted Containers",
              "filename": "List Soft Deleted Containers.bru",
              "seq": 14,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers?$filter=containerTypeId eq {{ContainerTypeId}}",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "containerTypeId eq {{ContainerTypeId}}",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Register ContainerType with Graph Explorer access",
              "filename": "Register ContainerType with Graph Explorer access.bru",
              "seq": 2,
              "request": {
                "url": "{{RootSiteUrl}}/_api/v2.1/storageContainerTypes/{{ContainerTypeId}}/applicationPermissions",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"value\": [\n    {\n      \"appId\": \"{{ClientID}}\",\n      \"delegated\": [\"full\"],\n      \"appOnly\": [\"full\"]\n    },\n\n    // Augloop\n    {\n      \"appId\": \"4354e225-50c9-4423-9ece-2d5afd904870\",\n      \"delegated\": [\"full\"],\n      \"appOnly\": [\"full\"]\n    },\n    // Augloop\n    {\n      \"appId\": \"99f53064-85db-4f9f-ab36-118a009b8857\",\n      \"delegated\": [\"full\"],\n      \"appOnly\": [\"full\"]\n    },\n    {\n        /*\n            This adds the Graph Explorer AppId to your Container Type with full permmissions\n            on delegated access. Note that you cannot create Containers with Graph Explore as\n            those calls must be made with a confidential client, and Graph Explorer only creates\n            public client tokens. But other APIs, include the Drive and DriveItem related calls,\n            should work. \n        */\n        \"appId\": \"de8bc8b5-d9f9-48b1-a8ad-b748da725064\", // Graph Explorer AppId\n        \"delegated\": [\"full\"],\n        \"appOnly\": [\"none\"] //Graph Explorer only supports delegated auth\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertSPOToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertSPOToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Register ContainerType",
              "filename": "Register ContainerType.bru",
              "seq": 1,
              "request": {
                "url": "{{RootSiteUrl}}/_api/v2.1/storageContainerTypes/{{ContainerTypeId}}/applicationPermissions",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"value\": [\n    {\n      \"appId\": \"{{ClientID}}\",\n      \"delegated\": [\"full\"],\n      \"appOnly\": [\"full\"]\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertSPOToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertSPOToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Set Container Custom Properties",
              "filename": "Set Container Custom Properties.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"urlPath\": {  \r\n        \"value\": \"northwind\",   \r\n        \"isSearchable\": true  \r\n    },   \r\n    \"foo\": { \r\n        \"value\": \"bar\",   \r\n        \"isSearchable\": false  \r\n    }\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Soft Delete Container by ID",
              "filename": "Soft Delete Container by ID.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 204) {\r\n//     pm.environment.set(\"DeletedContainerId\", pm.environment.get(\"ContainerId\"));\r\n//     pm.environment.unset(\"ContainerId\");\r\n//     pm.environment.unset(\"PermissionId\");\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Update User Permission",
              "filename": "Update User Permission.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions/{{PermissionId}}",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n  \"roles\": [\"writer\"]\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "await ensureAccessToken('AppOnlyCertGraphToken');"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Delegated",
      "filename": "Delegated",
      "items": [
        {
          "type": "folder",
          "name": "Containers",
          "filename": "Containers",
          "items": [
            {
              "type": "http",
              "name": "Activate Container",
              "filename": "Activate Container.bru",
              "seq": 2,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/activate",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Container",
              "filename": "Create Container.bru",
              "seq": 1,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"displayName\": \"PROD1118\",\n    \"description\": \"First container description.\",\n    \"containerTypeId\": \"{{ContainerTypeId}}\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 201) {\r\n//     var json = pm.response.json();\r\n//     postman.setEnvironmentVariable(\"ContainerId\", json.id);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Group Permissions",
              "filename": "Create Group Permissions.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{GroupAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 201) {\r\n//     var json = pm.response.json();\r\n//     postman.setEnvironmentVariable(\"PermissionId\", json.id);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create User Permission",
              "filename": "Create User Permission.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"roles\": [\"writer\"],\n  \"grantedToV2\": {\n    \"user\": {\n      \"userPrincipalName\": \"user0@a830edad9050849testsearch1.onmicrosoft.com\"\n    }\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 201) {\r\n//     var json = pm.response.json();\r\n//     postman.setEnvironmentVariable(\"PermissionId\", json.id);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Container Columns",
              "filename": "Get Container Columns.bru",
              "seq": 14,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/columns",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Container Custom Properties",
              "filename": "Get Container Custom Properties.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Container",
              "filename": "Get Container.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}?$select=id,displayName,containerTypeId,status,description,customProperties&$expand=permissions",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$select",
                    "value": "id,displayName,containerTypeId,status,description,customProperties",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$expand",
                    "value": "permissions",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Permissions",
              "filename": "Get Permissions.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Hard Delete Container by ID",
              "filename": "Hard Delete Container by ID.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{SoftDeletedContainerId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 204) {\r\n//     pm.environment.unset(\"SoftDeletedContainerId\");\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "List Containers",
              "filename": "List Containers.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {{ContainerTypeId}}",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "containerTypeId eq {{ContainerTypeId}}",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "List Soft Deleted Containers",
              "filename": "List Soft Deleted Containers.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers?$filter=containerTypeId eq {{ContainerTypeId}}",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "containerTypeId eq {{ContainerTypeId}}",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Set Container Custom Properties",
              "filename": "Set Container Custom Properties.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"urlPath\": {  \r\n        \"value\": \"northwind\",   \r\n        \"isSearchable\": false  \r\n    },\r\n    \"tags\": {\r\n        \"value\": \"northwind traders nwt nw\",\r\n        \"isSearchable\": true\r\n    },\r\n    \"department\": { \r\n        \"value\": \"finance\",   \r\n        \"isSearchable\": true \r\n    }\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Soft Delete Container by ID",
              "filename": "Soft Delete Container by ID.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// \r\n// if (pm.response.code === 204) {\r\n//     pm.environment.set(\"DeletedContainerId\", pm.environment.get(\"ContainerId\"));\r\n//     pm.environment.unset(\"ContainerId\");\r\n//     pm.environment.unset(\"PermissionId\");\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Update User Permission",
              "filename": "Update User Permission.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions/{{PermissionId}}",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n  \"roles\": [\"writer\"]\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{DelegatedGraphToken}}"
                  }
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Files",
          "filename": "Files",
          "items": [
            {
              "type": "http",
              "name": "Create edit share link",
              "filename": "Create edit share link.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"type\": \"edit\",\r\n    \"scope\": \"organization\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Create Folder",
              "filename": "Create Folder.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/children",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"name\": \"New Folder\",\n  \"folder\": {}\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Create preview link",
              "filename": "Create preview link.bru",
              "seq": 14,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/preview",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Create view share link",
              "filename": "Create view share link.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get container SharePointIds",
              "filename": "Get container SharePointIds.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}?$select=SharePointIds",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$select",
                    "value": "SharePointIds",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get Drive",
              "filename": "Get Drive.bru",
              "seq": 1,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get DriveItems NEW items",
              "filename": "Get DriveItems NEW items.bru",
              "seq": 16,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items?$filter=true&$orderBy=listitem/fields/Modified",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Prefer",
                    "value": "HonorNonIndexedQueriesWarningMayFailRandomly",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$filter",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$orderBy",
                    "value": "listitem/fields/Modified",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get DriveItems",
              "filename": "Get DriveItems.bru",
              "seq": 2,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/root/children?$orderBy=lastModifiedDateTime",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Prefer",
                    "value": "HonorNonIndexedQueriesWarningMayFailRandomly",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$orderBy",
                    "value": "lastModifiedDateTime",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get file thumbnails",
              "filename": "Get file thumbnails.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/thumbnails",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get file versions",
              "filename": "Get file versions.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/versions",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get File",
              "filename": "Get File.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get Files in Folder",
              "filename": "Get Files in Folder.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{ItemId}}/children",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get Recent Files",
              "filename": "Get Recent Files.bru",
              "seq": 15,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/me/drive/recent",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Rename a file",
              "filename": "Rename a file.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
                "method": "PATCH",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"name\": \"Northwind Proposal Updated.docx\"\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"FileId\", json.id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search DriveItems in Drive",
              "filename": "Search DriveItems in Drive.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/search(q='Copy')",
                "method": "GET",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Upload a File",
              "filename": "Upload a File.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root:/Ad Slogans.docx:/content",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"FileId\", json.id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "folder",
              "name": "Sharing",
              "filename": "Sharing",
              "items": [
                {
                  "type": "http",
                  "name": "Delete sharing permission",
                  "filename": "Delete sharing permission.bru",
                  "seq": 6,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get sharing permission",
                  "filename": "Get sharing permission.bru",
                  "seq": 5,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "List sharing permissions",
                  "filename": "List sharing permissions.bru",
                  "seq": 4,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Send a sharing invitation -Guest-",
                  "filename": "Send a sharing invitation -Guest-.bru",
                  "seq": 3,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/invite",
                    "method": "POST",
                    "headers": [],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\r\n    \"requireSignIn\": true,\r\n    \"sendInvitation\": false,\r\n    \"roles\": [\"read\"],\r\n    \"recipients\": [{\r\n            \"email\": \"{{SharingGuestUser}}\"\r\n        }\r\n    ],\r\n    \"message\": null\r\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"PermissionId\", json.value[0].id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Send a sharing invitation -Unknown Guest-",
                  "filename": "Send a sharing invitation -Unknown Guest-.bru",
                  "seq": 2,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
                    "method": "POST",
                    "headers": [],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Send a sharing invitation",
                  "filename": "Send a sharing invitation.bru",
                  "seq": 1,
                  "request": {
                    "url": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/invite",
                    "method": "POST",
                    "headers": [],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\r\n    \"requireSignIn\": true,\r\n    \"sendInvitation\": false,\r\n    \"roles\": [\"read\"],\r\n    \"recipients\": [{\r\n            \"email\": \"{{SharingTenantUser}}\"\r\n        }\r\n    ],\r\n    \"message\": null\r\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         var json = JSON.parse(responseBody);\r\n//         postman.setEnvironmentVariable(\"PermissionId\", json.value[0].id);\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                    "docs": "",
                    "auth": {
                      "mode": "none"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "Security",
          "filename": "Security",
          "items": [
            {
              "type": "http",
              "name": "Get alerts filtered by category",
              "filename": "Get alerts filtered by category.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Category eq 'ransomware'&$top=5",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "Category eq 'ransomware'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$top",
                    "value": "5",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get alerts filtered by destination",
              "filename": "Get alerts filtered by destination.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts?$filter=networkConnections/any(d:d/destinationAddress eq '{destination-address}')",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "networkConnections/any(d:d/destinationAddress eq '{destination-address}')",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get alerts filtered by status",
              "filename": "Get alerts filtered by status.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Status eq 'NewAlert'&$top=1",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "Status eq 'NewAlert'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$top",
                    "value": "1",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get alerts from Azure Security Center",
              "filename": "Get alerts from Azure Security Center.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts?$filter=vendorInformation/provider eq 'ASC'&$top=5",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "vendorInformation/provider eq 'ASC'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$top",
                    "value": "5",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get alerts with high severity",
              "filename": "Get alerts with high severity.bru",
              "seq": 2,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Severity eq 'High'&$top=5",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$filter",
                    "value": "Severity eq 'High'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$top",
                    "value": "5",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get alerts",
              "filename": "Get alerts.bru",
              "seq": 1,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/alerts",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get secure scores control profiles",
              "filename": "Get secure scores control profiles.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/secureScoreControlProfiles?$top=5",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$top",
                    "value": "5",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get secure scores",
              "filename": "Get secure scores.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/security/secureScores?$top=5",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "$top",
                    "value": "5",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get security action by id",
              "filename": "Get security action by id.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/securityActions/{{SecurityActionsId}}",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         else\r\n//         {\r\n//             var json = JSON.parse(responseBody);\r\n//             postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get security actions",
              "filename": "Get security actions.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/securityActions",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         else\r\n//         {\r\n//             var json = JSON.parse(responseBody);\r\n//             postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get TI indicator by id",
              "filename": "Get TI indicator by id.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/tiIndicators/{{TIIndicatorId}}",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Get TI indicators",
              "filename": "Get TI indicators.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/tiIndicators",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         else\r\n//         {\r\n//             var json = JSON.parse(responseBody);\r\n//             postman.setEnvironmentVariable(\"TIIndicatorId\", json.value[0].id);\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "List retention labels",
              "filename": "List retention labels.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/beta/security/labels/retentionLabels",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//         else\r\n//         {\r\n//             var json = JSON.parse(responseBody);\r\n//             postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "folder",
              "name": "eDiscovery",
              "filename": "eDiscovery",
              "items": [
                {
                  "type": "folder",
                  "name": "Case Creation",
                  "filename": "Case Creation",
                  "items": [
                    {
                      "type": "http",
                      "name": "Create custodian userSource",
                      "filename": "Create custodian userSource.bru",
                      "seq": 7,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"email\": \"{{custodianEmail}}\",\n    \"includedSources\": \"mailbox, site\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"custodianUserSource\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Create Custodians",
                      "filename": "Create Custodians.bru",
                      "seq": 5,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"email\":\"{{custodianEmail}}\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"custodianId\", json.id);\n// postman.setEnvironmentVariable(\"custodianEmail\", json.email);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Create ediscoveryCase",
                      "filename": "Create ediscoveryCase.bru",
                      "seq": 2,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"displayName\": \"Test Container Queries 2\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"ediscoveryCaseId\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Create ediscoveryNoncustodialDataSources",
                      "filename": "Create ediscoveryNoncustodialDataSources.bru",
                      "seq": 10,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"dataSource\" : { \n        \"@odata.type\" : \"microsoft.graph.security.siteSource\", \n        \"site@odata.bind\" : \"{{SiteId}}\" \n    }\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"noncustodialId\", json.id);\n// postman.setEnvironmentVariable(\"noncustodialDataSource\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "ediscoveryCustodian- applyHold",
                      "filename": "ediscoveryCustodian- applyHold.bru",
                      "seq": 8,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/applyHold",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"ids\": [\n    \"{{custodianId}}\"\n  ]\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "ediscoveryNoncustodialDataSource- applyHold",
                      "filename": "ediscoveryNoncustodialDataSource- applyHold.bru",
                      "seq": 11,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources/applyHold",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"ids\": [\n    \"{{noncustodialId}}\"\n  ]\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Get ediscoveryCase",
                      "filename": "Get ediscoveryCase.bru",
                      "seq": 3,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}",
                        "method": "GET",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List ediscoveryCases",
                      "filename": "List ediscoveryCases.bru",
                      "seq": 1,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases",
                        "method": "GET",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List ediscoveryCustodian",
                      "filename": "List ediscoveryCustodian.bru",
                      "seq": 6,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians",
                        "method": "GET",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List ediscoveryNoncustodialDataSources",
                      "filename": "List ediscoveryNoncustodialDataSources.bru",
                      "seq": 12,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources",
                        "method": "GET",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List userSources",
                      "filename": "List userSources.bru",
                      "seq": 9,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources",
                        "method": "GET",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Update ediscoveryCase",
                      "filename": "Update ediscoveryCase.bru",
                      "seq": 4,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}",
                        "method": "PATCH",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"externalId\": \"Updated external case value 12345\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "Workflow automation",
                  "filename": "Workflow automation",
                  "items": [
                    {
                      "type": "http",
                      "name": "Create ediscoveryReviewSetQuery",
                      "filename": "Create ediscoveryReviewSetQuery.bru",
                      "seq": 8,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"displayName\": \"Microsoft Graph Query\",\n    \"contentQuery\": \"(Author=\\\"edison\\\")\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"ediscoveryReviewSetQueryId\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Create reviewSets",
                      "filename": "Create reviewSets.bru",
                      "seq": 5,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"displayName\": \"My Microsoft Graph Review Set\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"ediscoveryReviewSetId\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Create searches",
                      "filename": "Create searches.bru",
                      "seq": 1,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"displayName\": \"Microsoft Graph Search\",\n    \"description\": \"This is an eDiscovery Premium search using Microsoft Graph\",\n    \"contentQuery\": \"HasAttachment=true\",\n    \"custodianSources@odata.bind\": [\n        \"https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources/{{custodianUserSource}}\"\n    ],\n    \"noncustodialSources@odata.bind\": [\n        \"https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialdatasources/{{noncustodialDataSource}}\"\n    ]\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// var json = JSON.parse(responseBody);\n// postman.setEnvironmentVariable(\"ediscoverySearchId\", json.id);",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Delete ediscoveryReviewSetQuery",
                      "filename": "Delete ediscoveryReviewSetQuery.bru",
                      "seq": 11,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries/{{ediscoveryReviewSetQueryId}}",
                        "method": "DELETE",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "ediscoveryReviewSet- addToReviewSet",
                      "filename": "ediscoveryReviewSet- addToReviewSet.bru",
                      "seq": 7,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/addToReviewSet",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"search\": {\n        \"id\": \"{{ediscoverySearchId}}\"\n    },\n    \"additionalDataOptions\": \"linkedFiles\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "ediscoverySearch- estimate Statistics",
                      "filename": "ediscoverySearch- estimate Statistics.bru",
                      "seq": 3,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches/{{ediscoverySearchId}}/estimateStatistics",
                        "method": "POST",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List caseOperations",
                      "filename": "List caseOperations.bru",
                      "seq": 12,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/operations",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List lastEstimateStatisticsOperation",
                      "filename": "List lastEstimateStatisticsOperation.bru",
                      "seq": 4,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches/{{ediscoverySearchId}}/lastEstimateStatisticsOperation",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List queries",
                      "filename": "List queries.bru",
                      "seq": 10,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List reviewSets",
                      "filename": "List reviewSets.bru",
                      "seq": 6,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List searches",
                      "filename": "List searches.bru",
                      "seq": 2,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Update ediscoveryReviewSetQuery",
                      "filename": "Update ediscoveryReviewSetQuery.bru",
                      "seq": 9,
                      "request": {
                        "url": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries/{{ediscoveryReviewSetQueryId}}",
                        "method": "PATCH",
                        "headers": [],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n    \"displayName\": \"Microsoft Graph Query (Update)\",\n    \"contentQuery\": \"(ContentType=document)\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "// ",
                        "docs": "",
                        "auth": {
                          "mode": "none"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "Search",
          "filename": "Search",
          "items": [
            {
              "type": "http",
              "name": "Apply refined query passing the aggregationToken",
              "filename": "Apply refined query passing the aggregationToken.bru",
              "seq": 14,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"Requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregationFilters\": [\n                \"contentclass:\\\"ǂǂ5354535f4c6973744974656d5f446f63756d656e744c696272617279\\\"\",\n                \"FileType:\\\"ǂǂ646f6378\\\"\"                \n            ],\n            \"aggregations\": [\n                {\n                    \"field\": \"FileType\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"count\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                },\n                {\n                    \"field\": \"contentclass\",\n                    \"size\": 15,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsString\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Page search results",
              "filename": "Page search results.bru",
              "seq": 9,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"from\": 0,\n            \"size\": 15\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Refine results with numeric aggregations",
              "filename": "Refine results with numeric aggregations.bru",
              "seq": 13,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"Requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregations\": [\n                {\n                    \"field\": \"Size\",\n                    \"size\": 15,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsNumber\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0,\n                        \"ranges\": [\n                            {\n                                \"to\": \"100\"\n                            },\n                            {\n                                \"from\": \"100\",\n                                \"to\": \"1000\"\n                            },\n                            {\n                                \"from\": \"1000\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Refine results with string aggregations",
              "filename": "Refine results with string aggregations.bru",
              "seq": 12,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregations\": [\n                {\n                    \"field\": \"FileType\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"count\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                },\n                {\n                    \"field\": \"contentclass\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsString\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Request spelling correction",
              "filename": "Request spelling correction.bru",
              "seq": 11,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "SdkVersion",
                    "value": "postman-graph/v2.0",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"requests\": [\n    {\n      \"entityTypes\": [\n        \"driveItem\"\n      ],\n      \"query\": {\n        \"queryString\": \"informatino\"\n      },\n      \"from\": 0,\n      \"size\": 5\n    }\n  ],\n  \"queryAlterationOptions\": {\n    \"enableSuggestion\": true,\n    \"enableModification\": true\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search by Container ID",
              "filename": "Search by Container ID.bru",
              "seq": 7,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"ContainerId:{{ContainerId}}\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search by Title in Container Copy",
              "filename": "Search by Title in Container Copy.bru",
              "seq": 6,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"*\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers by Custom Property Copy",
              "filename": "Search containers by Custom Property Copy.bru",
              "seq": 4,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"department:'marketing'\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers by Description Copy",
              "filename": "Search containers by Description Copy.bru",
              "seq": 3,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"Description:'pineapple'\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers by Title Copy",
              "filename": "Search containers by Title Copy.bru",
              "seq": 2,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"*\"\n            },\n            \"sharePointOneDriveOptions\": {\n              \"includeHiddenContent\": true\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers by Title-Description-CT Copy",
              "filename": "Search containers by Title-Description-CT Copy.bru",
              "seq": 5,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"Title:'mango' AND Description:'project' AND ContainerTypeId:{{ContainerTypeId}}\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers within CT Copy",
              "filename": "Search containers within CT Copy.bru",
              "seq": 1,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"ContainerTypeId:{{ContainerTypeId}}\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search containers within CT Copy2",
              "filename": "Search containers within CT Copy2.bru",
              "seq": 20,
              "request": {
                "url": "https://graph.microsoft.com/v1.0/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"ContainerTypeId:{{ContainerTypeId}}AND name:'Copy'\"\n            },\n            \"fields\": [\n              \"id\",\n              \"name\",\n              \"contentclass\",\n              \"title\",\n              \"weburl\",\n              \"created\",\n              \"lastmodifiedtime\",\n              \"lastmodifiedtimeforretention\"]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search content in Container Copy",
              "filename": "Search content in Container Copy.bru",
              "seq": 8,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"*\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{AppOnlyCertGraphToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Search with basic collapse",
              "filename": "Search with basic collapse.bru",
              "seq": 17,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"test\"\r\n            },\r\n            \"fields\": [\r\n                \"title\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\"\r\n                    ],\r\n                    \"limit\": 3\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search with compound collapse",
              "filename": "Search with compound collapse.bru",
              "seq": 18,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"cat\"\r\n            },\r\n            \"fields\": [\r\n                \"title\",\r\n                \"createdBy\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\",\r\n                        \"createdBy\"\r\n                    ],\r\n                    \"limit\": 3\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search with multi-level collapse",
              "filename": "Search with multi-level collapse.bru",
              "seq": 19,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"cat\"\r\n            },\r\n            \"fields\": [\r\n                \"title\",\r\n                \"createdBy\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\"\r\n                    ],\r\n                    \"limit\": 3\r\n                },\r\n                {\r\n                    \"fields\": [\r\n                        \"createdBy\"\r\n                    ],\r\n                    \"limit\": 2\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Search with queryTemplate",
              "filename": "Search with queryTemplate.bru",
              "seq": 16,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\",\n                \"queryTemplate\": \"({searchTerms})\"\n            }\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read.All, Sites.Read.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Sort search results",
              "filename": "Sort search results.bru",
              "seq": 10,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"sortProperties\": [\n                {\n                    \"name\": \"lastModifiedDateTime\",\n                    \"isDescending\": \"true\" // default is false\n                }\n            ]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Trim duplicated SharePoint search results",
              "filename": "Trim duplicated SharePoint search results.bru",
              "seq": 15,
              "request": {
                "url": "https://graph.microsoft.com/beta/search/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"trimDuplicate\": true\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "// try {\r\n//     if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r\n//     {\r\n//         console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r\n//     }\r\n//     else\r\n//     {\r\n//         if (pm.response.status === \"Forbidden\")\r\n//         {\r\n//             console.log(\"You need to add user delegated permissions in your application to at least *Files.Read.All, Sites.Read.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r\n//         }\r\n//     }\r\n// }\r\n// catch (e) {\r\n//     console.log(e);\r\n// }\r\n// ",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "activeEnvironmentUid": null,
  "environments": [
    {
      "variables": [
        {
          "name": "ContainerTypeId",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "ClientID",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "ConsumingTenantId",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "TenantName",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "RootSiteUrl",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "CertThumbprint",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "jsrsasign-js",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "AppOnlyCertSPOToken",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "ClientSecret",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "CertPrivateKey",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "AppOnlyCertGraphToken",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        }
      ],
      "name": "Sample-Environment"
    }
  ],
  "root": {
    "request": {
      "auth": {
        "mode": "oauth2",
        "oauth2": {
          "grantType": "authorization_code",
          "callbackUrl": "https://oauth.pstmn.io/v1/browser-callback",
          "authorizationUrl": "https://login.microsoftonline.com/{{ConsumingTenantId}}/oauth2/v2.0/authorize",
          "accessTokenUrl": "https://login.microsoftonline.com/{{ConsumingTenantId}}/oauth2/v2.0/token",
          "refreshTokenUrl": "",
          "clientId": "{{ClientID}}",
          "clientSecret": "{{ClientSecret}}",
          "scope": "FileStorageContainer.Selected Files.Read.All Sites.Read.All",
          "state": "",
          "pkce": false,
          "credentialsPlacement": "body",
          "credentialsId": "credentials",
          "tokenPlacement": "header",
          "tokenHeaderPrefix": "Bearer",
          "tokenQueryKey": "access_token",
          "autoFetchToken": true,
          "autoRefreshToken": false
        }
      },
      "script": {
        "req": "// Download required library\nif (!bru.getEnvVar('jsrsasign-js')) {\n  console.log('downloading RSA library');\n  const axios = require('axios');\n  const response = await axios.get(\n    'https://kjur.github.io/jsrsasign/jsrsasign-all-min.js',\n  );\n  ///console.log(response.data);\n  console.log('Downloaded RSA library');\n  // Why encode and decode the RSA library?\n  // 1. Environments can't be loaded if they have new lines.\n  // 2. Bruno doesn't detect changes made to env vars through a script.\n  // 3. Therefore, changes made to env vars through a script are not saved.\n  // 4. The RSA library has new lines\n  // 5. if for some reason a user makes changes to the environment\n  //    then all current environment vars are saved, including the RSA libray,\n  //    which makes the environment file \"not loadable\"\n  // 6. Encoding converts the data into a single (very large) line\n  // 7. Problem solved  \n  let encodedJsRsa = encodeURI(response.data);\n  bru.setEnvVar('jsrsasign-js', encodedJsRsa);\n}",
        "res": "if (res.body.access_token) {\n  bru.setEnvVar(\"DelegatedGraphToken\", res.body.access_token);\n}"
      }
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "SharePoint Embedded",
    "type": "collection",
    "ignore": ["node_modules", ".git"],
    "size": 1.7986478805541992,
    "filesCount": 147
  }
}
